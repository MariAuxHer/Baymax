07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400  1) /*
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400  2)     We will use something similar to the data structure implemented in this file to classify the doctors 
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400  3)     information based on their specialization and region.
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400  4) */
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400  5) 
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400  6) #include <iostream> 
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400  7) #include <fstream>
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400  8) #include <map>
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400  9) #include <vector>
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 10) #include <iomanip>
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 11) 
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 12) using namespace std; 
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 13) 
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 14) struct Doctor { 
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 15)     string name; 
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 16)     string mailing_address;
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 17) };
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 18) 
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 19) istream &operator>>(istream &in, Doctor &doctor) {
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 20)   in >> doctor.name >> doctor.mailing_address;
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 21)   return in;
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 22) }
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 23) 
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 24) ostream &operator<<(ostream &out, Doctor &doctor) {
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 25)   out << "Name: " << setw(20) << left << doctor.name << "Address: " << setw(20) << left << doctor.mailing_address;
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 26)   return out;
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 27) }
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 28) 
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 29) typedef map<string, map<string, vector<Doctor> > > map_doctors_specialization; 
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 30) typedef map<string, vector<Doctor> > map_doctors_region;
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 31) 
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 32) int main() { 
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 33)     ifstream fin("doc.txt"); 
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 34)     string specialization; 
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 35)     string region; 
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 36)     Doctor doctor; 
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 37)     map_doctors_specialization doctors_specialization; 
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 38)     vector<Doctor> vec_doctors_per_region;
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 39)     map_doctors_specialization::iterator it_specialization; 
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 40)     map_doctors_region::iterator it_region; 
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 41) 
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 42)     if(!fin.is_open()) { 
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 43)         cerr << "Can't open the file" << endl;
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 44)         return 1;
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 45)     }
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 46) 
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 47)     while (fin >> specialization >> region >> doctor) { 
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 48)         it_specialization = doctors_specialization.find(specialization); 
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 49)         if (it_specialization == doctors_specialization.end()) { 
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 50)             map_doctors_region doctors_region;
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 51)             vector<Doctor> vec_doctors_per_region;
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 52)             doctors_region[region] = vec_doctors_per_region; 
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 53)             doctors_specialization[specialization] = doctors_region;
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 54)             it_specialization = doctors_specialization.find(specialization); 
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 55)         }
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 56)         else {
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 57)             it_region = it_specialization->second.find(region); 
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 58)             if (it_region == it_specialization->second.end()) { 
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 59)                 vector<Doctor> vec_doctors_per_region;
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 60)                 it_specialization->second[region] = vec_doctors_per_region;
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 61)             }
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 62)         }
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 63)         it_specialization->second[region].push_back(doctor);
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 64)     }
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 65) 
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 66)     for (it_specialization = doctors_specialization.begin(); it_specialization != doctors_specialization.end(); it_specialization++) { 
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 67)         cout << "\n\nSpecialization: " << it_specialization->first << endl;
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 68)         for (it_region = it_specialization->second.begin(); it_region != it_specialization->second.end(); it_region++) { 
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 69)             cout << "\tRegion: " << it_region->first << endl; 
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 70)             cout << "\tProvider's Info: " << endl;
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 71)             for (size_t i = 0; i < it_region->second.size(); i++) { 
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 72)                 cout << "\t\t" << it_region->second[i] << endl;
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 73)             }
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 74)         }
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 75)     }
07f175d8 (MariAuxiHer 2023-10-13 15:09:44 -0400 76) }
b9717a91 (MariAuxiHer 2023-10-13 13:08:09 -0400  28) CSRF_TRUSTED_ORIGINS = ['http://localhost']
f52a14c7 (MariAuxiHer 2023-10-13 12:37:12 -0400  40)     'rest_framework', 