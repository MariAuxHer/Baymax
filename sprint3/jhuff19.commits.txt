dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500    1) {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500    2)  "cells": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500    3)   {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500    4)    "cell_type": "markdown",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500    5)    "metadata": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500    6)     "id": "ItXfxkxvosLH"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500    7)    },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500    8)    "source": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500    9)     "# Basic text classification: Medical Taxonomy"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   10)    ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   11)   },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   12)   {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   13)    "cell_type": "code",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   14)    "execution_count": 2,
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   15)    "metadata": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   16)     "id": "8RZOuS9LWQvv",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   17)     "tags": []
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   18)    },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   19)    "outputs": [],
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   20)    "source": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   21)     "import matplotlib.pyplot as plt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   22)     "import os\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   23)     "import re\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   24)     "import shutil\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   25)     "import string\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   26)     "import tensorflow as tf\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   27)     "\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   28)     "from tensorflow.keras import layers\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   29)     "from tensorflow.keras import losses\n"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   30)    ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   31)   },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   32)   {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   33)    "cell_type": "code",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   34)    "execution_count": 3,
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   35)    "metadata": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   36)     "id": "6-tTFS04dChr",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   37)     "tags": []
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   38)    },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   39)    "outputs": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   40)     {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   41)      "name": "stdout",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   42)      "output_type": "stream",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   43)      "text": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   44)       "2.9.0\n"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   45)      ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   46)     }
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   47)    ],
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   48)    "source": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   49)     "print(tf.__version__)"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   50)    ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   51)   },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   52)   {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   53)    "cell_type": "code",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   54)    "execution_count": 51,
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   55)    "metadata": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   56)     "id": "k7ZYnuajVlFN",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   57)     "tags": []
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   58)    },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   59)    "outputs": [],
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   60)    "source": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   61)     "dataset_dir = os.path.join('C:/Users/jhuff19/Desktop/Baymax/classification/classification_data')"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   62)    ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   63)   },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   64)   {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   65)    "cell_type": "code",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   66)    "execution_count": 52,
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   67)    "metadata": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   68)     "id": "355CfOvsV1pl",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   69)     "tags": []
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   70)    },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   71)    "outputs": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   72)     {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   73)      "data": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   74)       "text/plain": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   75)        "['.ipynb_checkpoints',\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   76)        " 'response_test_dermatology.txt',\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   77)        " 'response_test_family_medicine.txt',\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   78)        " 'response_test_optometry.txt',\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   79)        " 'response_train_dermatology.txt',\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   80)        " 'response_train_family_medicine.txt',\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   81)        " 'response_train_optometry.txt',\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   82)        " 'test',\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   83)        " 'train']"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   84)       ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   85)      },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   86)      "execution_count": 52,
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   87)      "metadata": {},
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   88)      "output_type": "execute_result"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   89)     }
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   90)    ],
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   91)    "source": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   92)     "os.listdir(dataset_dir)"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   93)    ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   94)   },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   95)   {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   96)    "cell_type": "code",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   97)    "execution_count": 53,
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   98)    "metadata": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   99)     "id": "7ASND15oXpF1",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  100)     "tags": []
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  101)    },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  102)    "outputs": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  103)     {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  104)      "data": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  105)       "text/plain": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  106)        "['dermatology', 'optometry']"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  107)       ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  108)      },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  109)      "execution_count": 53,
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  110)      "metadata": {},
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  111)      "output_type": "execute_result"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  112)     }
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  113)    ],
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  114)    "source": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  115)     "train_dir = os.path.join(dataset_dir, 'train')\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  116)     "os.listdir(train_dir)"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  117)    ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  118)   },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  119)   {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  120)    "cell_type": "code",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  121)    "execution_count": 54,
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  122)    "metadata": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  123)     "id": "R7g8hFvzWLIZ",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  124)     "tags": []
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  125)    },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  126)    "outputs": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  127)     {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  128)      "name": "stdout",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  129)      "output_type": "stream",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  130)      "text": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  131)       "Can you recommend treatments for reducing the appearance of sun damage or age spots?\n"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  132)      ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  133)     }
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  134)    ],
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  135)    "source": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  136)     "# displaying sample file\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  137)     "\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  138)     "sample_file = os.path.join(train_dir, 'dermatology/100.txt')\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  139)     "with open(sample_file) as f:\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  140)     "  print(f.read())"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  141)    ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  142)   },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  143)   {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  144)    "cell_type": "markdown",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  145)    "metadata": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  146)     "id": "Mk20TEm6ZRFP"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  147)    },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  148)    "source": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  149)     "### Load the dataset\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  150)     "\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  151)     "Loading the data off disk and prepare it into a format suitable for training with [text_dataset_from_directory](https://www.tensorflow.org/api_docs/python/tf/keras/preprocessing/text_dataset_from_directory) utility, which expects a directory structure as follows.\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  152)     "\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  153)     "```\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  154)     "main_directory/\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  155)     "...class_a/\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  156)     "......a_text_1.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  157)     "......a_text_2.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  158)     "...class_b/\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  159)     "......b_text_1.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  160)     "......b_text_2.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  161)     "```"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  162)    ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  163)   },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  164)   {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  165)    "cell_type": "markdown",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  166)    "metadata": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  167)     "id": "nQauv38Lnok3"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  168)    },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  169)    "source": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  170)     "`class_a` and `class_b` can be found in  `classification_data/train/dermatology` and `classification_data/train/family_medicine`"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  171)    ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  172)   },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  173)   {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  174)    "cell_type": "markdown",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  175)    "metadata": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  176)     "id": "95kkUdRoaeMw"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  177)    },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  178)    "source": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  179)     "Use the `text_dataset_from_directory` utility to create a labeled `tf.data.Dataset` [tf.data](https://www.tensorflow.org/guide/data)."
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  180)    ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  181)   },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  182)   {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  183)    "cell_type": "markdown",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  184)    "metadata": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  185)     "id": "SzxazN8Hq1pF"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  186)    },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  187)    "source": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  188)     "Note:  When using the `validation_split` and `subset` arguments, make sure to either specify a random seed, or to pass `shuffle=False`, so that the validation and training splits have no overlap."
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  189)    ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  190)   },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  191)   {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  192)    "cell_type": "code",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  193)    "execution_count": 55,
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  194)    "metadata": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  195)     "id": "nOrK-MTYaw3C",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  196)     "tags": []
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  197)    },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  198)    "outputs": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  199)     {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  200)      "name": "stdout",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  201)      "output_type": "stream",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  202)      "text": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  203)       "Found 400 files belonging to 2 classes.\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  204)       "Using 320 files for training.\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  205)       "Found 400 files belonging to 2 classes.\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  206)       "Using 80 files for validation.\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  207)       "Found 400 files belonging to 2 classes.\n"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  208)      ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  209)     }
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  210)    ],
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  211)    "source": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  212)     "batch_size = 20\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  213)     "seed = 42\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  214)     "\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  215)     "train_dir = os.path.join(dataset_dir, 'train')\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  216)     "val_dir = train_dir\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  217)     "test_dir = os.path.join(dataset_dir, 'test')\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  218)     "\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  219)     "# creates training dataset\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  220)     "raw_train_ds = tf.keras.utils.text_dataset_from_directory(\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  221)     "    train_dir, \n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  222)     "    batch_size=batch_size, \n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  223)     "    validation_split=0.2, \n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  224)     "    subset='training', \n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  225)     "    seed=seed)\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  226)     "\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  227)     "# creates validation dataset\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  228)     "raw_val_ds = tf.keras.utils.text_dataset_from_directory(\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  229)     "    train_dir, \n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  230)     "    batch_size=batch_size, \n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  231)     "    validation_split=0.2, \n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  232)     "    subset='validation', \n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  233)     "    seed=seed)\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  234)     "\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  235)     "# creates test dataset\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  236)     "raw_test_ds = tf.keras.utils.text_dataset_from_directory(\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  237)     "    test_dir, \n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  238)     "    batch_size=batch_size)"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  239)    ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  240)   },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  241)   {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  242)    "cell_type": "code",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  243)    "execution_count": 56,
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  244)    "metadata": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  245)     "id": "51wNaPPApk1K",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  246)     "tags": []
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  247)    },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  248)    "outputs": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  249)     {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  250)      "name": "stdout",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  251)      "output_type": "stream",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  252)      "text": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  253)       "Review b'What is the best way to care for my skin if I have seborrheic dermatitis?'\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  254)       "Label 0\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  255)       "Review b'Can you provide information on the effects of high-altitude environments on my eyes?'\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  256)       "Label 1\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  257)       "Review b'What is the best way to care for my skin if I have a bacterial skin infection?'\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  258)       "Label 0\n"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  259)      ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  260)     }
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  261)    ],
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  262)    "source": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  263)     "for text_batch, label_batch in raw_train_ds.take(1):\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  264)     "  for i in range(3):\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  265)     "    print(\"Review\", text_batch.numpy()[i])\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  266)     "    print(\"Label\", label_batch.numpy()[i])"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  267)    ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  268)   },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  269)   {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  270)    "cell_type": "code",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  271)    "execution_count": 57,
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  272)    "metadata": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  273)     "id": "MlICTG8spyO2",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  274)     "tags": []
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  275)    },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  276)    "outputs": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  277)     {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  278)      "name": "stdout",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  279)      "output_type": "stream",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  280)      "text": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  281)       "Label 0 corresponds to dermatology\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  282)       "Label 1 corresponds to optometry\n"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  283)      ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  284)     }
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  285)    ],
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  286)    "source": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  287)     "print(\"Label 0 corresponds to\", raw_train_ds.class_names[0])\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  288)     "print(\"Label 1 corresponds to\", raw_train_ds.class_names[1])"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  289)    ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  290)   },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  291)   {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  292)    "cell_type": "markdown",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  293)    "metadata": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  294)     "id": "qJmTiO0IYAjm",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  295)     "tags": []
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  296)    },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  297)    "source": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  298)     "### Prepare the dataset for training\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  299)     "\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  300)     "Standardizing, tokenizing, and vectorizing the data using `tf.keras.layers.TextVectorization`"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  301)    ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  302)   },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  303)   {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  304)    "cell_type": "code",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  305)    "execution_count": 58,
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  306)    "metadata": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  307)     "id": "SDRI_s_tX1Hk",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  308)     "tags": []
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  309)    },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  310)    "outputs": [],
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  311)    "source": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  312)     "# standardization for removing html tags\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  313)     "def custom_standardization(input_data):\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  314)     "  lowercase = tf.strings.lower(input_data)\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  315)     "  stripped_html = tf.strings.regex_replace(lowercase, '<br />', ' ')\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  316)     "  return tf.strings.regex_replace(stripped_html,\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  317)     "                                  '[%s]' % re.escape(string.punctuation),\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  318)     "                                  '')"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  319)    ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  320)   },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  321)   {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  322)    "cell_type": "code",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  323)    "execution_count": 59,
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  324)    "metadata": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  325)     "id": "-c76RvSzsMnX",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  326)     "tags": []
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  327)    },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  328)    "outputs": [],
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  329)    "source": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  330)     "max_features = 10000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  331)     "sequence_length = 250\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  332)     "\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  333)     "vectorize_layer = layers.TextVectorization(\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  334)     "    standardize=custom_standardization,\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  335)     "    max_tokens=max_features,\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  336)     "    output_mode='int',\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  337)     "    output_sequence_length=sequence_length)"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  338)    ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  339)   },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  340)   {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  341)    "cell_type": "markdown",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  342)    "metadata": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  343)     "id": "vlFOpfF6scT6"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  344)    },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  345)    "source": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  346)     "Calling `adapt` to fit the state of the preprocessing layer to the dataset to get model to build an index of strings to integers."
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  347)    ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  348)   },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  349)   {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  350)    "cell_type": "code",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  351)    "execution_count": 60,
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  352)    "metadata": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  353)     "id": "GH4_2ZGJsa_X",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  354)     "tags": []
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  355)    },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  356)    "outputs": [],
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  357)    "source": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  358)     "# Make a text-only dataset (without labels), then call adapt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  359)     "train_text = raw_train_ds.map(lambda x, y: x)\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  360)     "vectorize_layer.adapt(train_text)"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  361)    ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  362)   },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  363)   {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  364)    "cell_type": "code",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  365)    "execution_count": 61,
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  366)    "metadata": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  367)     "id": "SCIg_T50wOCU",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  368)     "tags": []
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  369)    },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  370)    "outputs": [],
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  371)    "source": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  372)     "def vectorize_text(text, label):\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  373)     "  text = tf.expand_dims(text, -1)\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  374)     "  return vectorize_layer(text), label"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  375)    ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  376)   },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  377)   {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  378)    "cell_type": "code",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  379)    "execution_count": 62,
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  380)    "metadata": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  381)     "id": "XULcm6B3xQIO",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  382)     "tags": []
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  383)    },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  384)    "outputs": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  385)     {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  386)      "name": "stdout",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  387)      "output_type": "stream",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  388)      "text": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  389)       "Review tf.Tensor(b'Are there any specific dietary recommendations to support healthy skin?', shape=(), dtype=string)\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  390)       "Label dermatology\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  391)       "Vectorized review (<tf.Tensor: shape=(1, 250), dtype=int64, numpy=\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  392)       "array([[ 17,  28,  44,  26, 199, 322,  18, 304, 264,  10,   0,   0,   0,\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  393)       "          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  394)       "          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  395)       "          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  396)       "          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  397)       "          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  398)       "          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  399)       "          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  400)       "          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  401)       "          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  402)       "          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  403)       "          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  404)       "          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  405)       "          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  406)       "          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  407)       "          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  408)       "          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  409)       "          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  410)       "          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  411)       "          0,   0,   0]], dtype=int64)>, <tf.Tensor: shape=(), dtype=int32, numpy=0>)\n"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  412)      ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  413)     }
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  414)    ],
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  415)    "source": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  416)     "# retrieve a batch (of 32 reviews and labels) from the dataset\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  417)     "text_batch, label_batch = next(iter(raw_train_ds))\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  418)     "first_review, first_label = text_batch[0], label_batch[0]\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  419)     "print(\"Review\", first_review)\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  420)     "print(\"Label\", raw_train_ds.class_names[first_label])\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  421)     "print(\"Vectorized review\", vectorize_text(first_review, first_label))"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  422)    ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  423)   },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  424)   {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  425)    "cell_type": "code",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  426)    "execution_count": 63,
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  427)    "metadata": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  428)     "id": "kRq9hTQzhVhW",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  429)     "tags": []
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  430)    },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  431)    "outputs": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  432)     {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  433)      "name": "stdout",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  434)      "output_type": "stream",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  435)      "text": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  436)       "Vocabulary size: 408\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  437)       "52 --->  symptoms\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  438)       "65 --->  infections\n"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  439)      ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  440)     }
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  441)    ],
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  442)    "source": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  443)     "print('Vocabulary size: {}'.format(len(vectorize_layer.get_vocabulary())))\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  444)     "\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  445)     "# for i in range(0,len(vectorize_layer.get_vocabulary())):\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  446)     "#     print(i, \"--->\", vectorize_layer.get_vocabulary()[i])\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  447)     "\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  448)     "print(\"52 ---> \",vectorize_layer.get_vocabulary()[52])\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  449)     "print(\"65 ---> \",vectorize_layer.get_vocabulary()[65])\n"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  450)    ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  451)   },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  452)   {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  453)    "cell_type": "code",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  454)    "execution_count": 64,
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  455)    "metadata": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  456)     "id": "2zhmpeViI1iG",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  457)     "tags": []
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  458)    },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  459)    "outputs": [],
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  460)    "source": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  461)     "train_ds = raw_train_ds.map(vectorize_text)\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  462)     "val_ds = raw_val_ds.map(vectorize_text)\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  463)     "test_ds = raw_test_ds.map(vectorize_text)"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  464)    ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  465)   },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  466)   {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  467)    "cell_type": "markdown",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  468)    "metadata": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  469)     "id": "YsVQyPMizjuO"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  470)    },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  471)    "source": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  472)     "### Configure the dataset for performance\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  473)     "\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  474)     "[data performance guide](https://www.tensorflow.org/guide/data_performance)."
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  475)    ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  476)   },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  477)   {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  478)    "cell_type": "code",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  479)    "execution_count": 65,
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  480)    "metadata": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  481)     "id": "wMcs_H7izm5m",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  482)     "tags": []
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  483)    },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  484)    "outputs": [],
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  485)    "source": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  486)     "AUTOTUNE = tf.data.AUTOTUNE\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  487)     "\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  488)     "train_ds = train_ds.cache().prefetch(buffer_size=AUTOTUNE)\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  489)     "val_ds = val_ds.cache().prefetch(buffer_size=AUTOTUNE)\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  490)     "test_ds = test_ds.cache().prefetch(buffer_size=AUTOTUNE)"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  491)    ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  492)   },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  493)   {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  494)    "cell_type": "markdown",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  495)    "metadata": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  496)     "id": "LLC02j2g-llC"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  497)    },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  498)    "source": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  499)     "### Create the model"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  500)    ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  501)   },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  502)   {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  503)    "cell_type": "code",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  504)    "execution_count": 66,
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  505)    "metadata": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  506)     "id": "dkQP6in8yUBR",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  507)     "tags": []
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  508)    },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  509)    "outputs": [],
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  510)    "source": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  511)     "embedding_dim = 16"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  512)    ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  513)   },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  514)   {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  515)    "cell_type": "code",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  516)    "execution_count": 67,
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  517)    "metadata": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  518)     "id": "xpKOoWgu-llD",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  519)     "tags": []
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  520)    },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  521)    "outputs": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  522)     {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  523)      "name": "stdout",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  524)      "output_type": "stream",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  525)      "text": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  526)       "Model: \"sequential_2\"\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  527)       "_________________________________________________________________\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  528)       " Layer (type)                Output Shape              Param #   \n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  529)       "=================================================================\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  530)       " embedding_1 (Embedding)     (None, None, 16)          160016    \n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  531)       "                                                                 \n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  532)       " dropout_2 (Dropout)         (None, None, 16)          0         \n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  533)       "                                                                 \n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  534)       " global_average_pooling1d_1   (None, 16)               0         \n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  535)       " (GlobalAveragePooling1D)                                        \n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  536)       "                                                                 \n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  537)       " dropout_3 (Dropout)         (None, 16)                0         \n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  538)       "                                                                 \n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  539)       " dense_1 (Dense)             (None, 1)                 17        \n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  540)       "                                                                 \n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  541)       "=================================================================\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  542)       "Total params: 160,033\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  543)       "Trainable params: 160,033\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  544)       "Non-trainable params: 0\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  545)       "_________________________________________________________________\n"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  546)      ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  547)     }
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  548)    ],
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  549)    "source": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  550)     "model = tf.keras.Sequential([\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  551)     "  layers.Embedding(max_features + 1, embedding_dim),\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  552)     "  layers.Dropout(0.2),\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  553)     "  layers.GlobalAveragePooling1D(),\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  554)     "  layers.Dropout(0.2),\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  555)     "  layers.Dense(1)])\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  556)     "\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  557)     "model.summary()"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  558)    ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  559)   },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  560)   {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  561)    "cell_type": "markdown",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  562)    "metadata": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  563)     "id": "L4EqVWg4-llM"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  564)    },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  565)    "source": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  566)     "### Loss function and optimizer"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  567)    ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  568)   },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  569)   {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  570)    "cell_type": "code",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  571)    "execution_count": 68,
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  572)    "metadata": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  573)     "id": "Mr0GP-cQ-llN",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  574)     "tags": []
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  575)    },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  576)    "outputs": [],
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  577)    "source": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  578)     "model.compile(loss=losses.BinaryCrossentropy(from_logits=True),\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  579)     "              optimizer='adam',\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  580)     "              metrics=tf.metrics.BinaryAccuracy(threshold=0.0))"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  581)    ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  582)   },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  583)   {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  584)    "cell_type": "markdown",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  585)    "metadata": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  586)     "id": "35jv_fzP-llU"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  587)    },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  588)    "source": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  589)     "### Train the model"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  590)    ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  591)   },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  592)   {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  593)    "cell_type": "code",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  594)    "execution_count": 93,
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  595)    "metadata": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  596)     "id": "tXSGrjWZ-llW",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  597)     "tags": []
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  598)    },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  599)    "outputs": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  600)     {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  601)      "name": "stdout",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  602)      "output_type": "stream",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  603)      "text": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  604)       "Epoch 1/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  605)       "16/16 [==============================] - 0s 9ms/step - loss: 0.0960 - binary_accuracy: 0.9844 - val_loss: 0.0840 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  606)       "Epoch 2/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  607)       "16/16 [==============================] - 0s 9ms/step - loss: 0.0966 - binary_accuracy: 0.9875 - val_loss: 0.0832 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  608)       "Epoch 3/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  609)       "16/16 [==============================] - 0s 9ms/step - loss: 0.0914 - binary_accuracy: 0.9906 - val_loss: 0.0822 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  610)       "Epoch 4/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  611)       "16/16 [==============================] - 0s 8ms/step - loss: 0.0965 - binary_accuracy: 0.9812 - val_loss: 0.0813 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  612)       "Epoch 5/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  613)       "16/16 [==============================] - 0s 10ms/step - loss: 0.0909 - binary_accuracy: 0.9844 - val_loss: 0.0804 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  614)       "Epoch 6/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  615)       "16/16 [==============================] - 0s 6ms/step - loss: 0.0942 - binary_accuracy: 0.9844 - val_loss: 0.0796 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  616)       "Epoch 7/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  617)       "16/16 [==============================] - 0s 10ms/step - loss: 0.0927 - binary_accuracy: 0.9844 - val_loss: 0.0787 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  618)       "Epoch 8/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  619)       "16/16 [==============================] - 0s 10ms/step - loss: 0.0913 - binary_accuracy: 0.9875 - val_loss: 0.0780 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  620)       "Epoch 9/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  621)       "16/16 [==============================] - 0s 8ms/step - loss: 0.0887 - binary_accuracy: 0.9906 - val_loss: 0.0771 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  622)       "Epoch 10/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  623)       "16/16 [==============================] - 0s 9ms/step - loss: 0.0906 - binary_accuracy: 0.9875 - val_loss: 0.0762 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  624)       "Epoch 11/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  625)       "16/16 [==============================] - 0s 9ms/step - loss: 0.0889 - binary_accuracy: 0.9844 - val_loss: 0.0754 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  626)       "Epoch 12/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  627)       "16/16 [==============================] - 0s 7ms/step - loss: 0.0890 - binary_accuracy: 0.9812 - val_loss: 0.0747 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  628)       "Epoch 13/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  629)       "16/16 [==============================] - 0s 7ms/step - loss: 0.0876 - binary_accuracy: 0.9812 - val_loss: 0.0739 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  630)       "Epoch 14/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  631)       "16/16 [==============================] - 0s 10ms/step - loss: 0.0841 - binary_accuracy: 0.9875 - val_loss: 0.0731 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  632)       "Epoch 15/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  633)       "16/16 [==============================] - 0s 10ms/step - loss: 0.0845 - binary_accuracy: 0.9844 - val_loss: 0.0724 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  634)       "Epoch 16/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  635)       "16/16 [==============================] - 0s 10ms/step - loss: 0.0890 - binary_accuracy: 0.9844 - val_loss: 0.0717 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  636)       "Epoch 17/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  637)       "16/16 [==============================] - 0s 11ms/step - loss: 0.0853 - binary_accuracy: 0.9812 - val_loss: 0.0708 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  638)       "Epoch 18/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  639)       "16/16 [==============================] - 0s 7ms/step - loss: 0.0833 - binary_accuracy: 0.9906 - val_loss: 0.0700 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  640)       "Epoch 19/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  641)       "16/16 [==============================] - 0s 10ms/step - loss: 0.0854 - binary_accuracy: 0.9906 - val_loss: 0.0693 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  642)       "Epoch 20/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  643)       "16/16 [==============================] - 0s 10ms/step - loss: 0.0816 - binary_accuracy: 0.9875 - val_loss: 0.0686 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  644)       "Epoch 21/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  645)       "16/16 [==============================] - 0s 11ms/step - loss: 0.0833 - binary_accuracy: 0.9812 - val_loss: 0.0678 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  646)       "Epoch 22/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  647)       "16/16 [==============================] - 0s 11ms/step - loss: 0.0807 - binary_accuracy: 0.9844 - val_loss: 0.0672 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  648)       "Epoch 23/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  649)       "16/16 [==============================] - 0s 9ms/step - loss: 0.0804 - binary_accuracy: 0.9937 - val_loss: 0.0665 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  650)       "Epoch 24/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  651)       "16/16 [==============================] - 0s 11ms/step - loss: 0.0770 - binary_accuracy: 0.9875 - val_loss: 0.0658 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  652)       "Epoch 25/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  653)       "16/16 [==============================] - 0s 10ms/step - loss: 0.0800 - binary_accuracy: 0.9937 - val_loss: 0.0650 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  654)       "Epoch 26/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  655)       "16/16 [==============================] - 0s 9ms/step - loss: 0.0806 - binary_accuracy: 0.9906 - val_loss: 0.0644 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  656)       "Epoch 27/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  657)       "16/16 [==============================] - 0s 11ms/step - loss: 0.0779 - binary_accuracy: 0.9906 - val_loss: 0.0637 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  658)       "Epoch 28/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  659)       "16/16 [==============================] - 0s 9ms/step - loss: 0.0784 - binary_accuracy: 0.9875 - val_loss: 0.0630 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  660)       "Epoch 29/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  661)       "16/16 [==============================] - 0s 10ms/step - loss: 0.0748 - binary_accuracy: 0.9875 - val_loss: 0.0624 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  662)       "Epoch 30/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  663)       "16/16 [==============================] - 0s 11ms/step - loss: 0.0743 - binary_accuracy: 0.9937 - val_loss: 0.0619 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  664)       "Epoch 31/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  665)       "16/16 [==============================] - 0s 11ms/step - loss: 0.0747 - binary_accuracy: 0.9875 - val_loss: 0.0611 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  666)       "Epoch 32/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  667)       "16/16 [==============================] - 0s 11ms/step - loss: 0.0744 - binary_accuracy: 0.9875 - val_loss: 0.0604 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  668)       "Epoch 33/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  669)       "16/16 [==============================] - 0s 10ms/step - loss: 0.0747 - binary_accuracy: 0.9844 - val_loss: 0.0597 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  670)       "Epoch 34/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  671)       "16/16 [==============================] - 0s 9ms/step - loss: 0.0715 - binary_accuracy: 0.9937 - val_loss: 0.0591 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  672)       "Epoch 35/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  673)       "16/16 [==============================] - 0s 12ms/step - loss: 0.0689 - binary_accuracy: 0.9875 - val_loss: 0.0586 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  674)       "Epoch 36/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  675)       "16/16 [==============================] - 0s 10ms/step - loss: 0.0690 - binary_accuracy: 0.9937 - val_loss: 0.0581 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  676)       "Epoch 37/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  677)       "16/16 [==============================] - 0s 9ms/step - loss: 0.0706 - binary_accuracy: 0.9875 - val_loss: 0.0575 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  678)       "Epoch 38/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  679)       "16/16 [==============================] - 0s 9ms/step - loss: 0.0700 - binary_accuracy: 0.9906 - val_loss: 0.0569 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  680)       "Epoch 39/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  681)       "16/16 [==============================] - 0s 9ms/step - loss: 0.0720 - binary_accuracy: 0.9906 - val_loss: 0.0564 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  682)       "Epoch 40/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  683)       "16/16 [==============================] - 0s 10ms/step - loss: 0.0692 - binary_accuracy: 0.9906 - val_loss: 0.0557 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  684)       "Epoch 41/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  685)       "16/16 [==============================] - 0s 10ms/step - loss: 0.0684 - binary_accuracy: 0.9937 - val_loss: 0.0551 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  686)       "Epoch 42/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  687)       "16/16 [==============================] - 0s 8ms/step - loss: 0.0678 - binary_accuracy: 0.9906 - val_loss: 0.0545 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  688)       "Epoch 43/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  689)       "16/16 [==============================] - 0s 11ms/step - loss: 0.0691 - binary_accuracy: 0.9906 - val_loss: 0.0541 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  690)       "Epoch 44/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  691)       "16/16 [==============================] - 0s 9ms/step - loss: 0.0688 - binary_accuracy: 0.9906 - val_loss: 0.0533 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  692)       "Epoch 45/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  693)       "16/16 [==============================] - 0s 9ms/step - loss: 0.0668 - binary_accuracy: 0.9875 - val_loss: 0.0529 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  694)       "Epoch 46/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  695)       "16/16 [==============================] - 0s 10ms/step - loss: 0.0641 - binary_accuracy: 0.9937 - val_loss: 0.0524 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  696)       "Epoch 47/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  697)       "16/16 [==============================] - 0s 9ms/step - loss: 0.0642 - binary_accuracy: 0.9906 - val_loss: 0.0518 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  698)       "Epoch 48/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  699)       "16/16 [==============================] - 0s 9ms/step - loss: 0.0682 - binary_accuracy: 0.9906 - val_loss: 0.0512 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  700)       "Epoch 49/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  701)       "16/16 [==============================] - 0s 10ms/step - loss: 0.0662 - binary_accuracy: 0.9937 - val_loss: 0.0506 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  702)       "Epoch 50/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  703)       "16/16 [==============================] - 0s 9ms/step - loss: 0.0673 - binary_accuracy: 0.9906 - val_loss: 0.0502 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  704)       "Epoch 51/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  705)       "16/16 [==============================] - 0s 9ms/step - loss: 0.0639 - binary_accuracy: 0.9937 - val_loss: 0.0497 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  706)       "Epoch 52/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  707)       "16/16 [==============================] - 0s 10ms/step - loss: 0.0630 - binary_accuracy: 0.9937 - val_loss: 0.0492 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  708)       "Epoch 53/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  709)       "16/16 [==============================] - 0s 11ms/step - loss: 0.0633 - binary_accuracy: 0.9906 - val_loss: 0.0488 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  710)       "Epoch 54/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  711)       "16/16 [==============================] - 0s 10ms/step - loss: 0.0619 - binary_accuracy: 0.9937 - val_loss: 0.0484 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  712)       "Epoch 55/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  713)       "16/16 [==============================] - 0s 9ms/step - loss: 0.0596 - binary_accuracy: 0.9906 - val_loss: 0.0479 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  714)       "Epoch 56/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  715)       "16/16 [==============================] - 0s 9ms/step - loss: 0.0611 - binary_accuracy: 0.9937 - val_loss: 0.0472 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  716)       "Epoch 57/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  717)       "16/16 [==============================] - 0s 10ms/step - loss: 0.0592 - binary_accuracy: 0.9937 - val_loss: 0.0467 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  718)       "Epoch 58/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  719)       "16/16 [==============================] - 0s 10ms/step - loss: 0.0600 - binary_accuracy: 0.9937 - val_loss: 0.0464 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  720)       "Epoch 59/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  721)       "16/16 [==============================] - 0s 8ms/step - loss: 0.0590 - binary_accuracy: 0.9937 - val_loss: 0.0459 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  722)       "Epoch 60/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  723)       "16/16 [==============================] - 0s 9ms/step - loss: 0.0598 - binary_accuracy: 0.9937 - val_loss: 0.0452 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  724)       "Epoch 61/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  725)       "16/16 [==============================] - 0s 6ms/step - loss: 0.0581 - binary_accuracy: 0.9937 - val_loss: 0.0448 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  726)       "Epoch 62/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  727)       "16/16 [==============================] - 0s 9ms/step - loss: 0.0595 - binary_accuracy: 0.9937 - val_loss: 0.0443 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  728)       "Epoch 63/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  729)       "16/16 [==============================] - 0s 10ms/step - loss: 0.0568 - binary_accuracy: 0.9937 - val_loss: 0.0440 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  730)       "Epoch 64/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  731)       "16/16 [==============================] - 0s 10ms/step - loss: 0.0581 - binary_accuracy: 0.9906 - val_loss: 0.0435 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  732)       "Epoch 65/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  733)       "16/16 [==============================] - 0s 10ms/step - loss: 0.0587 - binary_accuracy: 0.9937 - val_loss: 0.0431 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  734)       "Epoch 66/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  735)       "16/16 [==============================] - 0s 10ms/step - loss: 0.0548 - binary_accuracy: 0.9937 - val_loss: 0.0426 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  736)       "Epoch 67/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  737)       "16/16 [==============================] - 0s 6ms/step - loss: 0.0550 - binary_accuracy: 0.9906 - val_loss: 0.0422 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  738)       "Epoch 68/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  739)       "16/16 [==============================] - 0s 10ms/step - loss: 0.0547 - binary_accuracy: 0.9937 - val_loss: 0.0418 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  740)       "Epoch 69/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  741)       "16/16 [==============================] - 0s 11ms/step - loss: 0.0557 - binary_accuracy: 0.9937 - val_loss: 0.0414 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  742)       "Epoch 70/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  743)       "16/16 [==============================] - 0s 9ms/step - loss: 0.0515 - binary_accuracy: 0.9937 - val_loss: 0.0408 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  744)       "Epoch 71/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  745)       "16/16 [==============================] - 0s 10ms/step - loss: 0.0552 - binary_accuracy: 0.9937 - val_loss: 0.0406 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  746)       "Epoch 72/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  747)       "16/16 [==============================] - 0s 10ms/step - loss: 0.0552 - binary_accuracy: 0.9937 - val_loss: 0.0402 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  748)       "Epoch 73/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  749)       "16/16 [==============================] - 0s 10ms/step - loss: 0.0524 - binary_accuracy: 0.9937 - val_loss: 0.0397 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  750)       "Epoch 74/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  751)       "16/16 [==============================] - 0s 10ms/step - loss: 0.0519 - binary_accuracy: 0.9937 - val_loss: 0.0392 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  752)       "Epoch 75/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  753)       "16/16 [==============================] - 0s 10ms/step - loss: 0.0503 - binary_accuracy: 0.9937 - val_loss: 0.0389 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  754)       "Epoch 76/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  755)       "16/16 [==============================] - 0s 9ms/step - loss: 0.0510 - binary_accuracy: 0.9937 - val_loss: 0.0386 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  756)       "Epoch 77/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  757)       "16/16 [==============================] - 0s 10ms/step - loss: 0.0511 - binary_accuracy: 0.9937 - val_loss: 0.0382 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  758)       "Epoch 78/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  759)       "16/16 [==============================] - 0s 8ms/step - loss: 0.0499 - binary_accuracy: 0.9937 - val_loss: 0.0379 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  760)       "Epoch 79/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  761)       "16/16 [==============================] - 0s 10ms/step - loss: 0.0498 - binary_accuracy: 0.9937 - val_loss: 0.0375 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  762)       "Epoch 80/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  763)       "16/16 [==============================] - 0s 10ms/step - loss: 0.0511 - binary_accuracy: 0.9937 - val_loss: 0.0371 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  764)       "Epoch 81/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  765)       "16/16 [==============================] - 0s 8ms/step - loss: 0.0482 - binary_accuracy: 0.9937 - val_loss: 0.0368 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  766)       "Epoch 82/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  767)       "16/16 [==============================] - 0s 10ms/step - loss: 0.0480 - binary_accuracy: 0.9937 - val_loss: 0.0364 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  768)       "Epoch 83/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  769)       "16/16 [==============================] - 0s 8ms/step - loss: 0.0468 - binary_accuracy: 0.9937 - val_loss: 0.0358 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  770)       "Epoch 84/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  771)       "16/16 [==============================] - 0s 9ms/step - loss: 0.0510 - binary_accuracy: 0.9937 - val_loss: 0.0356 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  772)       "Epoch 85/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  773)       "16/16 [==============================] - 0s 10ms/step - loss: 0.0470 - binary_accuracy: 0.9937 - val_loss: 0.0352 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  774)       "Epoch 86/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  775)       "16/16 [==============================] - 0s 8ms/step - loss: 0.0509 - binary_accuracy: 0.9937 - val_loss: 0.0348 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  776)       "Epoch 87/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  777)       "16/16 [==============================] - 0s 10ms/step - loss: 0.0473 - binary_accuracy: 0.9937 - val_loss: 0.0344 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  778)       "Epoch 88/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  779)       "16/16 [==============================] - 0s 8ms/step - loss: 0.0466 - binary_accuracy: 0.9937 - val_loss: 0.0342 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  780)       "Epoch 89/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  781)       "16/16 [==============================] - 0s 9ms/step - loss: 0.0438 - binary_accuracy: 0.9937 - val_loss: 0.0340 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  782)       "Epoch 90/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  783)       "16/16 [==============================] - 0s 9ms/step - loss: 0.0451 - binary_accuracy: 0.9969 - val_loss: 0.0335 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  784)       "Epoch 91/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  785)       "16/16 [==============================] - 0s 9ms/step - loss: 0.0465 - binary_accuracy: 0.9937 - val_loss: 0.0332 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  786)       "Epoch 92/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  787)       "16/16 [==============================] - 0s 9ms/step - loss: 0.0423 - binary_accuracy: 0.9937 - val_loss: 0.0329 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  788)       "Epoch 93/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  789)       "16/16 [==============================] - 0s 10ms/step - loss: 0.0443 - binary_accuracy: 0.9969 - val_loss: 0.0325 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  790)       "Epoch 94/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  791)       "16/16 [==============================] - 0s 9ms/step - loss: 0.0425 - binary_accuracy: 0.9937 - val_loss: 0.0322 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  792)       "Epoch 95/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  793)       "16/16 [==============================] - 0s 7ms/step - loss: 0.0456 - binary_accuracy: 0.9937 - val_loss: 0.0319 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  794)       "Epoch 96/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  795)       "16/16 [==============================] - 0s 9ms/step - loss: 0.0425 - binary_accuracy: 0.9969 - val_loss: 0.0318 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  796)       "Epoch 97/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  797)       "16/16 [==============================] - 0s 10ms/step - loss: 0.0416 - binary_accuracy: 0.9969 - val_loss: 0.0317 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  798)       "Epoch 98/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  799)       "16/16 [==============================] - 0s 9ms/step - loss: 0.0431 - binary_accuracy: 0.9937 - val_loss: 0.0313 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  800)       "Epoch 99/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  801)       "16/16 [==============================] - 0s 10ms/step - loss: 0.0428 - binary_accuracy: 0.9937 - val_loss: 0.0308 - val_binary_accuracy: 1.0000\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  802)       "Epoch 100/100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  803)       "16/16 [==============================] - 0s 9ms/step - loss: 0.0416 - binary_accuracy: 0.9937 - val_loss: 0.0304 - val_binary_accuracy: 1.0000\n"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  804)      ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  805)     }
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  806)    ],
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  807)    "source": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  808)     "epochs = 100\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  809)     "history = model.fit(\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  810)     "    train_ds,\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  811)     "    validation_data=val_ds,\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  812)     "    epochs=epochs)"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  813)    ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  814)   },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  815)   {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  816)    "cell_type": "markdown",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  817)    "metadata": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  818)     "id": "9EEGuDVuzb5r"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  819)    },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  820)    "source": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  821)     "### Evaluate the model"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  822)    ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  823)   },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  824)   {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  825)    "cell_type": "code",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  826)    "execution_count": 94,
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  827)    "metadata": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  828)     "id": "zOMKywn4zReN",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  829)     "tags": []
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  830)    },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  831)    "outputs": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  832)     {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  833)      "name": "stdout",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  834)      "output_type": "stream",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  835)      "text": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  836)       "20/20 [==============================] - 0s 3ms/step - loss: 0.1960 - binary_accuracy: 0.9450\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  837)       "Loss:  0.19603967666625977\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  838)       "Accuracy:  0.9449999928474426\n"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  839)      ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  840)     }
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  841)    ],
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  842)    "source": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  843)     "loss, accuracy = model.evaluate(test_ds)\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  844)     "\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  845)     "print(\"Loss: \", loss)\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  846)     "print(\"Accuracy: \", accuracy)"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  847)    ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  848)   },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  849)   {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  850)    "cell_type": "markdown",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  851)    "metadata": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  852)     "id": "ldbQqCw2Xc1W"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  853)    },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  854)    "source": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  855)     "### Create a plot of accuracy and loss over time"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  856)    ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  857)   },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  858)   {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  859)    "cell_type": "code",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  860)    "execution_count": 73,
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  861)    "metadata": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  862)     "id": "-YcvZsdvWfDf",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  863)     "tags": []
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  864)    },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  865)    "outputs": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  866)     {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  867)      "data": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  868)       "text/plain": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  869)        "dict_keys(['loss', 'binary_accuracy', 'val_loss', 'val_binary_accuracy'])"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  870)       ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  871)      },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  872)      "execution_count": 73,
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  873)      "metadata": {},
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  874)      "output_type": "execute_result"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  875)     }
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  876)    ],
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  877)    "source": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  878)     "history_dict = history.history\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  879)     "history_dict.keys()"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  880)    ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  881)   },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  882)   {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  883)    "cell_type": "code",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  884)    "execution_count": 74,
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  885)    "metadata": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  886)     "id": "2SEMeQ5YXs8z",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  887)     "tags": []
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  888)    },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  889)    "outputs": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  890)     {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  891)      "data": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  892)       "image/png": "\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  893)       "text/plain": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  894)        "<Figure size 432x288 with 1 Axes>"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  895)       ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  896)      },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  897)      "metadata": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  898)       "needs_background": "light"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  899)      },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  900)      "output_type": "display_data"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  901)     }
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  902)    ],
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  903)    "source": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  904)     "acc = history_dict['binary_accuracy']\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  905)     "val_acc = history_dict['val_binary_accuracy']\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  906)     "loss = history_dict['loss']\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  907)     "val_loss = history_dict['val_loss']\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  908)     "\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  909)     "epochs = range(1, len(acc) + 1)\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  910)     "\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  911)     "# \"bo\" is for \"blue dot\"\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  912)     "plt.plot(epochs, loss, 'bo', label='Training loss')\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  913)     "# b is for \"solid blue line\"\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  914)     "plt.plot(epochs, val_loss, 'b', label='Validation loss')\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  915)     "plt.title('Training and validation loss')\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  916)     "plt.xlabel('Epochs')\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  917)     "plt.ylabel('Loss')\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  918)     "plt.legend()\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  919)     "\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  920)     "plt.show()"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  921)    ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  922)   },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  923)   {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  924)    "cell_type": "code",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  925)    "execution_count": 75,
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  926)    "metadata": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  927)     "id": "Z3PJemLPXwz_",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  928)     "tags": []
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  929)    },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  930)    "outputs": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  931)     {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  932)      "data": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  933)       "image/png": "\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  934)       "text/plain": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  935)        "<Figure size 432x288 with 1 Axes>"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  936)       ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  937)      },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  938)      "metadata": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  939)       "needs_background": "light"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  940)      },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  941)      "output_type": "display_data"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  942)     }
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  943)    ],
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  944)    "source": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  945)     "plt.plot(epochs, acc, 'bo', label='Training acc')\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  946)     "plt.plot(epochs, val_acc, 'b', label='Validation acc')\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  947)     "plt.title('Training and validation accuracy')\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  948)     "plt.xlabel('Epochs')\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  949)     "plt.ylabel('Accuracy')\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  950)     "plt.legend(loc='lower right')\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  951)     "\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  952)     "plt.show()"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  953)    ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  954)   },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  955)   {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  956)    "cell_type": "markdown",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  957)    "metadata": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  958)     "id": "-to23J3Vy5d3"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  959)    },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  960)    "source": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  961)     "## Export the model"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  962)    ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  963)   },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  964)   {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  965)    "cell_type": "code",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  966)    "execution_count": 95,
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  967)    "metadata": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  968)     "id": "FWXsMvryuZuq",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  969)     "tags": []
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  970)    },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  971)    "outputs": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  972)     {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  973)      "name": "stdout",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  974)      "output_type": "stream",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  975)      "text": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  976)       "20/20 [==============================] - 1s 6ms/step - loss: 0.1960 - accuracy: 0.9450\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  977)       "0.9449999928474426\n"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  978)      ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  979)     }
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  980)    ],
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  981)    "source": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  982)     "export_model = tf.keras.Sequential([\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  983)     "  vectorize_layer,\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  984)     "  model,\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  985)     "  layers.Activation('sigmoid')\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  986)     "])\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  987)     "\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  988)     "export_model.compile(\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  989)     "    loss=losses.BinaryCrossentropy(from_logits=False), optimizer=\"adam\", metrics=['accuracy']\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  990)     ")\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  991)     "\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  992)     "# Test it with `raw_test_ds`, which yields raw strings\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  993)     "loss, accuracy = export_model.evaluate(raw_test_ds)\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  994)     "print(accuracy)"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  995)    ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  996)   },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  997)   {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  998)    "cell_type": "markdown",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  999)    "metadata": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1000)     "id": "TwQgoN88LoEF",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1001)     "tags": []
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1002)    },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1003)    "source": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1004)     "### Inference on new data\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1005)     "\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1006)     "`model.predict()` for new tests"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1007)    ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1008)   },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1009)   {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1010)    "cell_type": "code",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1011)    "execution_count": 96,
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1012)    "metadata": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1013)     "id": "QW355HH5L49K",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1014)     "tags": []
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1015)    },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1016)    "outputs": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1017)     {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1018)      "name": "stdout",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1019)      "output_type": "stream",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1020)      "text": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1021)       "1/1 [==============================] - 0s 161ms/step\n"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1022)      ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1023)     },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1024)     {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1025)      "data": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1026)       "text/plain": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1027)        "array([[0.04104062],\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1028)        "       [0.06713   ],\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1029)        "       [0.05873717],\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1030)        "       [0.92884684],\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1031)        "       [0.9361604 ],\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1032)        "       [0.4141862 ]], dtype=float32)"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1033)       ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1034)      },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1035)      "execution_count": 96,
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1036)      "metadata": {},
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1037)      "output_type": "execute_result"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1038)     }
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1039)    ],
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1040)    "source": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1041)     "examples = [\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1042)     "    \"What should I do to make my skincare routine better?\",\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1043)     "    \"What is the best way to deal with eczema\",\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1044)     "    \"How should I deal with saggy skin?\",\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1045)     "    \"What are the effects of blue light on my eyes?\",\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1046)     "    \"How does a lack of sleep affect my eyes?\",\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1047)     "    \"How can I deal with cysts on my eyes?\"\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1048)     "]\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1049)     "\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1050)     "export_model.predict(examples)"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1051)    ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1052)   },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1053)   {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1054)    "cell_type": "code",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1055)    "execution_count": 91,
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1056)    "metadata": {},
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1057)    "outputs": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1058)     {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1059)      "name": "stdout",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1060)      "output_type": "stream",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1061)      "text": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1062)       "1/1 [==============================] - 0s 81ms/step\n"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1063)      ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1064)     },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1065)     {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1066)      "data": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1067)       "text/plain": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1068)        "array([[0.41696256],\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1069)        "       [0.6110917 ]], dtype=float32)"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1070)       ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1071)      },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1072)      "execution_count": 91,
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1073)      "metadata": {},
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1074)      "output_type": "execute_result"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1075)     }
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1076)    ],
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1077)    "source": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1078)     "examples = [\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1079)     "    \"Why is my skin itchy and red?\",\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1080)     "    \"Why are my eyes watering?\" \n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1081)     "]\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1082)     "export_model.predict(examples)"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1083)    ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1084)   },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1085)   {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1086)    "cell_type": "code",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1087)    "execution_count": null,
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1088)    "metadata": {},
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1089)    "outputs": [],
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1090)    "source": []
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1091)   }
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1092)  ],
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1093)  "metadata": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1094)   "accelerator": "GPU",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1095)   "colab": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1096)    "collapsed_sections": [],
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1097)    "name": "text_classification.ipynb",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1098)    "toc_visible": true
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1099)   },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1100)   "kernelspec": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1101)    "display_name": "Python 3 (ipykernel)",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1102)    "language": "python",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1103)    "name": "python3"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1104)   },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1105)   "language_info": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1106)    "codemirror_mode": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1107)     "name": "ipython",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1108)     "version": 3
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1109)    },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1110)    "file_extension": ".py",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1111)    "mimetype": "text/x-python",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1112)    "name": "python",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1113)    "nbconvert_exporter": "python",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1114)    "pygments_lexer": "ipython3",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1115)    "version": "3.9.12"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1116)   }
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1117)  },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1118)  "nbformat": 4,
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1119)  "nbformat_minor": 4
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 1120) }
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   1) {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   2)  "cells": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   3)   {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   4)    "cell_type": "code",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   5)    "execution_count": 10,
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   6)    "id": "bc075b90-c494-41f0-827f-a495f60225fd",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   7)    "metadata": {},
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   8)    "outputs": [],
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500   9)    "source": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  10)     "import numpy as np"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  11)    ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  12)   },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  13)   {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  14)    "cell_type": "code",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  15)    "execution_count": 19,
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  16)    "id": "a52b1c9f-df2f-4a8b-a978-4482ce3d19d8",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  17)    "metadata": {},
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  18)    "outputs": [],
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  19)    "source": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  20)     "def create_individual_files(input_file, output_dir):\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  21)     "    # Open the original text file for reading\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  22)     "    with open(input_file, 'r') as file:\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  23)     "        # Read lines from the file\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  24)     "        lines = file.readlines()\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  25)     "\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  26)     "        # Create individual text files for each line\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  27)     "        for i, line in enumerate(lines):\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  28)     "            # Define the name for the individual file\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  29)     "            output_file = f'%s/{i + 1}.txt' % output_dir\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  30)     "\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  31)     "            # Write the line to the individual file\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  32)     "            with open(output_file, 'w') as individual_file:\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  33)     "                individual_file.write(line.strip())\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  34)     "\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  35)     "            print(f\"Created {output_file}\")"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  36)    ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  37)   },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  38)   {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  39)    "cell_type": "code",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  40)    "execution_count": 22,
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  41)    "id": "89c275e1-1e74-49e0-b691-2f16ba0845c4",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  42)    "metadata": {},
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  43)    "outputs": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  44)     {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  45)      "name": "stdout",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  46)      "output_type": "stream",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  47)      "text": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  48)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/1.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  49)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/2.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  50)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/3.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  51)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/4.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  52)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/5.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  53)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/6.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  54)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/7.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  55)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/8.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  56)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/9.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  57)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/10.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  58)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/11.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  59)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/12.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  60)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/13.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  61)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/14.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  62)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/15.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  63)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/16.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  64)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/17.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  65)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/18.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  66)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/19.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  67)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/20.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  68)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/21.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  69)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/22.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  70)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/23.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  71)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/24.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  72)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/25.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  73)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/26.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  74)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/27.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  75)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/28.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  76)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/29.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  77)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/30.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  78)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/31.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  79)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/32.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  80)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/33.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  81)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/34.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  82)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/35.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  83)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/36.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  84)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/37.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  85)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/38.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  86)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/39.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  87)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/40.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  88)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/41.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  89)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/42.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  90)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/43.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  91)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/44.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  92)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/45.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  93)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/46.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  94)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/47.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  95)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/48.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  96)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/49.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  97)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/50.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  98)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/51.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500  99)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/52.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 100)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/53.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 101)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/54.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 102)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/55.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 103)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/56.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 104)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/57.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 105)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/58.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 106)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/59.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 107)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/60.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 108)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/61.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 109)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/62.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 110)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/63.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 111)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/64.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 112)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/65.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 113)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/66.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 114)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/67.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 115)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/68.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 116)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/69.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 117)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/70.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 118)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/71.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 119)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/72.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 120)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/73.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 121)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/74.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 122)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/75.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 123)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/76.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 124)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/77.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 125)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/78.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 126)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/79.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 127)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/80.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 128)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/81.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 129)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/82.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 130)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/83.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 131)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/84.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 132)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/85.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 133)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/86.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 134)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/87.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 135)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/88.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 136)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/89.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 137)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/90.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 138)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/91.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 139)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/92.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 140)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/93.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 141)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/94.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 142)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/95.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 143)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/96.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 144)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/97.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 145)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/98.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 146)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/99.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 147)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/100.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 148)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/101.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 149)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/102.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 150)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/103.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 151)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/104.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 152)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/105.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 153)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/106.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 154)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/107.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 155)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/108.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 156)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/109.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 157)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/110.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 158)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/111.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 159)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/112.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 160)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/113.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 161)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/114.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 162)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/115.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 163)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/116.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 164)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/117.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 165)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/118.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 166)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/119.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 167)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/120.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 168)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/121.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 169)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/122.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 170)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/123.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 171)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/124.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 172)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/125.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 173)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/126.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 174)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/127.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 175)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/128.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 176)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/129.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 177)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/130.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 178)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/131.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 179)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/132.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 180)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/133.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 181)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/134.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 182)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/135.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 183)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/136.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 184)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/137.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 185)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/138.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 186)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/139.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 187)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/140.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 188)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/141.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 189)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/142.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 190)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/143.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 191)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/144.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 192)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/145.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 193)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/146.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 194)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/147.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 195)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/148.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 196)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/149.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 197)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/150.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 198)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/151.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 199)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/152.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 200)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/153.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 201)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/154.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 202)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/155.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 203)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/156.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 204)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/157.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 205)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/158.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 206)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/159.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 207)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/160.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 208)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/161.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 209)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/162.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 210)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/163.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 211)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/164.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 212)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/165.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 213)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/166.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 214)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/167.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 215)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/168.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 216)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/169.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 217)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/170.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 218)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/171.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 219)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/172.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 220)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/173.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 221)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/174.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 222)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/175.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 223)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/176.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 224)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/177.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 225)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/178.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 226)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/179.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 227)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/180.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 228)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/181.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 229)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/182.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 230)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/183.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 231)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/184.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 232)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/185.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 233)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/186.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 234)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/187.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 235)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/188.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 236)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/189.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 237)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/190.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 238)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/191.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 239)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/192.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 240)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/193.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 241)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/194.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 242)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/195.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 243)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/196.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 244)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/197.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 245)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/198.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 246)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/199.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 247)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry/200.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 248)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/1.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 249)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/2.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 250)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/3.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 251)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/4.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 252)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/5.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 253)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/6.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 254)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/7.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 255)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/8.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 256)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/9.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 257)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/10.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 258)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/11.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 259)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/12.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 260)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/13.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 261)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/14.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 262)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/15.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 263)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/16.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 264)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/17.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 265)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/18.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 266)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/19.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 267)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/20.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 268)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/21.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 269)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/22.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 270)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/23.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 271)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/24.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 272)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/25.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 273)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/26.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 274)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/27.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 275)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/28.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 276)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/29.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 277)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/30.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 278)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/31.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 279)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/32.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 280)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/33.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 281)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/34.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 282)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/35.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 283)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/36.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 284)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/37.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 285)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/38.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 286)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/39.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 287)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/40.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 288)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/41.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 289)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/42.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 290)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/43.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 291)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/44.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 292)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/45.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 293)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/46.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 294)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/47.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 295)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/48.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 296)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/49.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 297)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/50.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 298)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/51.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 299)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/52.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 300)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/53.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 301)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/54.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 302)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/55.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 303)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/56.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 304)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/57.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 305)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/58.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 306)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/59.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 307)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/60.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 308)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/61.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 309)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/62.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 310)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/63.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 311)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/64.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 312)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/65.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 313)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/66.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 314)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/67.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 315)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/68.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 316)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/69.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 317)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/70.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 318)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/71.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 319)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/72.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 320)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/73.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 321)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/74.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 322)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/75.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 323)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/76.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 324)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/77.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 325)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/78.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 326)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/79.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 327)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/80.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 328)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/81.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 329)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/82.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 330)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/83.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 331)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/84.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 332)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/85.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 333)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/86.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 334)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/87.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 335)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/88.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 336)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/89.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 337)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/90.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 338)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/91.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 339)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/92.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 340)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/93.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 341)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/94.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 342)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/95.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 343)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/96.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 344)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/97.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 345)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/98.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 346)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/99.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 347)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/100.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 348)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/101.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 349)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/102.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 350)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/103.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 351)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/104.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 352)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/105.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 353)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/106.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 354)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/107.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 355)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/108.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 356)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/109.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 357)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/110.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 358)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/111.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 359)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/112.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 360)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/113.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 361)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/114.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 362)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/115.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 363)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/116.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 364)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/117.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 365)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/118.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 366)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/119.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 367)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/120.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 368)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/121.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 369)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/122.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 370)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/123.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 371)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/124.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 372)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/125.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 373)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/126.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 374)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/127.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 375)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/128.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 376)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/129.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 377)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/130.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 378)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/131.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 379)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/132.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 380)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/133.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 381)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/134.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 382)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/135.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 383)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/136.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 384)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/137.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 385)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/138.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 386)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/139.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 387)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/140.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 388)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/141.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 389)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/142.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 390)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/143.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 391)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/144.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 392)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/145.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 393)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/146.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 394)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/147.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 395)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/148.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 396)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/149.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 397)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/150.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 398)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/151.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 399)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/152.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 400)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/153.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 401)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/154.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 402)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/155.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 403)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/156.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 404)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/157.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 405)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/158.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 406)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/159.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 407)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/160.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 408)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/161.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 409)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/162.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 410)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/163.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 411)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/164.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 412)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/165.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 413)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/166.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 414)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/167.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 415)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/168.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 416)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/169.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 417)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/170.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 418)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/171.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 419)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/172.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 420)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/173.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 421)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/174.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 422)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/175.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 423)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/176.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 424)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/177.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 425)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/178.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 426)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/179.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 427)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/180.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 428)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/181.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 429)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/182.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 430)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/183.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 431)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/184.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 432)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/185.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 433)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/186.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 434)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/187.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 435)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/188.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 436)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/189.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 437)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/190.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 438)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/191.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 439)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/192.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 440)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/193.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 441)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/194.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 442)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/195.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 443)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/196.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 444)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/197.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 445)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/198.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 446)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/199.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 447)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry/200.txt\n"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 448)      ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 449)     }
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 450)    ],
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 451)    "source": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 452)     "# optometry data conversion\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 453)     "\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 454)     "input_file = 'C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/optometry_train.txt'\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 455)     "output_dir = 'C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/optometry'\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 456)     "\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 457)     "# Call the function to create individual files\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 458)     "create_individual_files(input_file, output_dir)\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 459)     "\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 460)     "input_file = 'C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/optometry_test.txt'\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 461)     "output_dir = 'C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/optometry'\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 462)     "\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 463)     "# Call the function to create individual files\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 464)     "create_individual_files(input_file, output_dir)"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 465)    ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 466)   },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 467)   {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 468)    "cell_type": "code",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 469)    "execution_count": null,
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 470)    "id": "0acdef3c-6349-4e24-88ec-5f6658780ec2",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 471)    "metadata": {},
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 472)    "outputs": [],
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 473)    "source": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 474)     "# dermatology\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 475)     "\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 476)     "input_file = 'C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/dermatology_train.txt'\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 477)     "output_dir = 'C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/dermatology'\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 478)     "\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 479)     "# Call the function to create individual files\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 480)     "create_individual_files(input_file, output_dir)\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 481)     "\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 482)     "input_file = 'C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/dermatology_test.txt'\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 483)     "output_dir = 'C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology'\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 484)     "\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 485)     "# Call the function to create individual files\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 486)     "create_individual_files(input_file, output_dir)"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 487)    ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 488)   },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 489)   {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 490)    "cell_type": "code",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 491)    "execution_count": 21,
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 492)    "id": "63061f02-debd-4218-b832-94f408e44b81",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 493)    "metadata": {},
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 494)    "outputs": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 495)     {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 496)      "name": "stdout",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 497)      "output_type": "stream",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 498)      "text": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 499)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/1.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 500)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/2.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 501)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/3.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 502)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/4.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 503)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/5.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 504)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/6.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 505)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/7.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 506)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/8.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 507)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/9.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 508)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/10.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 509)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/11.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 510)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/12.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 511)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/13.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 512)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/14.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 513)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/15.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 514)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/16.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 515)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/17.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 516)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/18.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 517)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/19.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 518)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/20.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 519)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/21.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 520)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/22.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 521)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/23.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 522)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/24.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 523)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/25.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 524)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/26.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 525)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/27.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 526)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/28.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 527)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/29.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 528)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/30.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 529)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/31.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 530)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/32.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 531)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/33.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 532)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/34.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 533)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/35.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 534)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/36.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 535)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/37.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 536)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/38.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 537)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/39.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 538)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/40.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 539)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/41.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 540)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/42.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 541)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/43.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 542)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/44.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 543)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/45.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 544)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/46.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 545)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/47.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 546)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/48.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 547)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/49.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 548)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/50.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 549)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/51.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 550)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/52.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 551)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/53.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 552)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/54.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 553)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/55.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 554)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/56.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 555)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/57.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 556)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/58.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 557)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/59.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 558)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/60.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 559)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/61.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 560)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/62.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 561)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/63.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 562)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/64.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 563)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/65.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 564)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/66.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 565)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/67.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 566)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/68.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 567)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/69.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 568)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/70.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 569)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/71.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 570)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/72.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 571)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/73.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 572)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/74.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 573)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/75.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 574)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/76.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 575)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/77.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 576)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/78.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 577)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/79.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 578)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/80.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 579)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/81.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 580)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/82.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 581)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/83.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 582)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/84.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 583)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/85.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 584)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/86.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 585)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/87.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 586)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/88.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 587)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/89.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 588)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/90.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 589)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/91.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 590)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/92.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 591)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/93.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 592)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/94.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 593)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/95.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 594)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/96.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 595)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/97.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 596)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/98.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 597)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/99.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 598)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/100.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 599)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/101.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 600)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/102.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 601)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/103.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 602)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/104.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 603)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/105.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 604)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/106.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 605)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/107.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 606)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/108.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 607)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/109.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 608)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/110.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 609)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/111.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 610)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/112.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 611)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/113.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 612)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/114.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 613)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/115.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 614)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/116.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 615)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/117.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 616)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/118.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 617)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/119.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 618)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/120.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 619)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/121.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 620)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/122.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 621)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/123.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 622)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/124.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 623)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/125.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 624)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/126.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 625)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/127.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 626)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/128.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 627)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/129.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 628)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/130.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 629)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/131.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 630)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/132.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 631)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/133.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 632)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/134.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 633)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/135.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 634)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/136.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 635)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/137.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 636)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/138.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 637)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/139.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 638)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/140.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 639)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/141.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 640)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/142.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 641)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/143.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 642)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/144.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 643)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/145.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 644)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/146.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 645)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/147.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 646)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/148.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 647)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/149.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 648)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/150.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 649)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/151.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 650)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/152.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 651)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/153.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 652)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/154.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 653)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/155.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 654)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/156.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 655)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/157.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 656)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/158.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 657)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/159.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 658)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/160.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 659)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/161.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 660)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/162.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 661)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/163.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 662)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/164.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 663)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/165.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 664)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/166.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 665)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/167.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 666)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/168.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 667)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/169.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 668)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/170.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 669)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/171.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 670)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/172.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 671)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/173.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 672)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/174.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 673)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/175.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 674)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/176.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 675)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/177.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 676)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/178.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 677)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/179.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 678)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/180.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 679)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/181.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 680)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/182.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 681)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/183.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 682)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/184.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 683)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/185.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 684)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/186.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 685)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/187.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 686)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/188.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 687)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/189.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 688)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/190.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 689)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/191.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 690)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/192.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 691)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/193.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 692)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/194.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 693)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/195.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 694)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/196.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 695)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/197.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 696)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/198.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 697)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/199.txt\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 698)       "Created C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/dermatology/200.txt\n"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 699)      ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 700)     }
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 701)    ],
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 702)    "source": [
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 703)     "# family medicine\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 704)     "\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 705)     "input_file = 'C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/family_medicine_train.txt'\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 706)     "output_dir = 'C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/train/family_medicine'\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 707)     "\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 708)     "# Call the function to create individual files\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 709)     "create_individual_files(input_file, output_dir)\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 710)     "\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 711)     "input_file = 'C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/family_medicine_test.txt'\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 712)     "output_dir = 'C:/Users/jhuff19/Desktop/Baymax/classification/classification_data/test/family_medicine'\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 713)     "\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 714)     "# Call the function to create individual files\n",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 715)     "create_individual_files(input_file, output_dir)"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 716)    ]
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 717)   },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 718)   {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 719)    "cell_type": "code",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 720)    "execution_count": null,
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 721)    "id": "172021cd-eae8-40b2-a9ea-922dd878993c",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 722)    "metadata": {},
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 723)    "outputs": [],
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 724)    "source": []
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 725)   }
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 726)  ],
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 727)  "metadata": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 728)   "kernelspec": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 729)    "display_name": "Python 3 (ipykernel)",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 730)    "language": "python",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 731)    "name": "python3"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 732)   },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 733)   "language_info": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 734)    "codemirror_mode": {
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 735)     "name": "ipython",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 736)     "version": 3
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 737)    },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 738)    "file_extension": ".py",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 739)    "mimetype": "text/x-python",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 740)    "name": "python",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 741)    "nbconvert_exporter": "python",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 742)    "pygments_lexer": "ipython3",
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 743)    "version": "3.9.12"
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 744)   }
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 745)  },
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 746)  "nbformat": 4,
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 747)  "nbformat_minor": 5
dd63bbd9 (Jordan Huff 2023-11-13 18:24:44 -0500 748) }
